<?php
$this->headScript()->appendFile($this->assetUrl('js/sortable.js', 'Omeka'));
echo $this->pageTitle('Edit Form: “Share your photo”');
$form->prepare();
$promptRow = <<<EOD
<tr class="prompt">
    <td><span class="sortable-handle"></span></td>
    <td>
        <span class="prompt-type-span"></span>
        <ul class="actions">
            <li><a href="#" class="prompt-edit o-icon-edit" aria-label="Edit" title="Edit"></a></li>
            <li><a href="#" class="prompt-delete o-icon-delete" aria-label="Delete" title="Delete"></a></li>
            <li><a href="#" class="prompt-undo-delete o-icon-undo" aria-label="Undo Delete" title="Undo Delete" style="display: none;"></a></li>
        </ul>
        <input type="hidden" class="prompt-id" name="o-module-collecting:collecting_prompts[__INDEX__][o:id]">
        <input type="hidden" class="prompt-type" name="o-module-collecting:collecting_prompts[__INDEX__][o-module-collecting:type]">
        <input type="hidden" class="prompt-text" name="o-module-collecting:collecting_prompts[__INDEX__][o-module-collecting:text]">
        <input type="hidden" class="prompt-input-type" name="o-module-collecting:collecting_prompts[__INDEX__][o-module-collecting:input_type]">
        <input type="hidden" class="prompt-select-options" name="o-module-collecting:collecting_prompts[__INDEX__][o-module-collecting:select_options]">
        <input type="hidden" class="prompt-media-type" name="o-module-collecting:collecting_prompts[__INDEX__][o-module-collecting:media_type]">
        <input type="hidden" class="prompt-property-id" name="o-module-collecting:collecting_prompts[__INDEX__][o:property][o:id]">
    </td>
    <td><span class="prompt-text-span"></span></td>
</tr>
EOD;
?>

<?php echo $this->form()->openTag($form); ?>

<div id="page-actions">
    <a href="#" class="delete button">Delete</a>
    <button>Save</button>
</div>

<?php echo $this->formCollection($form, false); ?>

<h3>Prompts</h3>

<span id="prompts-span" data-prompts-data="<?php echo $this->escapeHtml(json_encode($collectingForm->prompts())); ?>"
    data-prompt-row-template="<?php echo $this->escapeHtml($promptRow); ?>"></span>

<a href="#" id="prompt-add" class="button">Add Prompt</a>

<table class="tablesaw">
    <thead>
    <tr>
        <th></th>
        <th>Type</th>
        <th>Text</th>
    </tr>
    </thead>
    <tbody id="prompts"></tbody>
</table>

<?php echo $this->form()->closeTag(); ?>

<div id="prompt-sidebar" class="sidebar">
    <a href="#" class="sidebar-close o-icon-close" aria-label="Close" title="Close"></a>
    <div class="sidebar-content">
        <h3>Prompt</h3>

        <div class="sidebar-section">
            <h4>Prompt Type</h4>
            <select id="prompt-type" name="type">
                <option>Select a prompt type...</option>
                <option value="property">Property</option>
                <option value="media">Media</option>
                <option value="input">Supplementary</option>
            </select>
        </div>

        <div class="sidebar-section">
            <h4>Prompt Text</h4>
            <textarea id="prompt-text" name="text" style="width:100%;" rows="3"></textarea>
        </div>

        <div class="sidebar-section">
            <h4>Property</h4>
            <?php echo $this->propertySelect(['name' => 'property', 'options' => ['empty_option' => 'Select a property...'], 'attributes' => ['id' => 'prompt-property']]); ?>
        </div>

        <div class="sidebar-section">
            <h4>Media Type</h4>
            <select id="prompt-media-type" name="media-type">
                <option>Select a media type</option>
                <option value="upload">Upload</option>
                <option value="url">URL</option>
                <option value="html">HTML</option>
            </select>
        </div>

        <div class="sidebar-section">
            <h4>Input Type</h4>
            <select id="prompt-input-type" name="input-type">
                <option value="text">Text box (one line)</option>
                <option value="textarea">Text box (multiple line)</option>
                <option value="select">Select menu</option>
            </select>
        </div>

        <div class="sidebar-section">
            <h4>Select Menu Options</h4>
            <textarea id="prompt-select-options" name="select-options" style="width:100%;" rows="3" placeholder="Option One&#13;&#10;Option Two&#13;&#10;..."></textarea>
        </div>

        <a id="prompt-save" href="#" class="button">Save Changes</a>
    </div>
</div>

<script>
$(document).ready( function() {

/**
 * Populate a prompt row with the provided data.
 *
 * @param {Object} promptData
 */
var populatePromptRow = function(promptData) {

    // Detect whether a row is currently being edited. If one is, populate that
    // one. If one isn't, create a new row using the row template, populate it,
    // and append it to the prompts table.
    var promptRows = $('#prompts');
    var promptRow = promptRows.children('.prompt-editing');
    if (!promptRow.length) {
        var index = promptRows.children('.prompt').length;
        var promptRowTemplate = $('#prompts-span').data('promptRowTemplate');
        promptRow = $(promptRowTemplate.replace(/__INDEX__/g, index));
        promptRows.append(promptRow);
    }

    // Populate the visual elements.
    promptRow.find('.prompt-type-span').text(promptData['o-module-collecting:type']);
    promptRow.find('.prompt-text-span').text(promptData['o-module-collecting:text']);

    // Populate the hidden inputs.
    promptRow.find('.prompt-id').val(promptData['o:id']);
    promptRow.find('.prompt-type').val(promptData['o-module-collecting:type']);
    promptRow.find('.prompt-text').val(promptData['o-module-collecting:text']);
    promptRow.find('.prompt-input-type').val(promptData['o-module-collecting:input_type']);
    promptRow.find('.prompt-select-options').val(promptData['o-module-collecting:select_options']);
    promptRow.find('.prompt-media-type').val(promptData['o-module-collecting:media_type']);
    if (promptData['o:property']) {
        promptRow.find('.prompt-property-id').val(promptData['o:property']['o:id']);
    }
}

/**
 * Reset the sidebar to its default state (i.e. no selected type).
 */
var resetSidebar = function() {
    $('#prompt-type').prop('selectedIndex', 0)
        .prop('disabled', false).css('background-color', '#ffffff');
    $('#prompt-text').val('').closest('.sidebar-section').hide();
    $('#prompt-property').prop('selectedIndex', 0).closest('.sidebar-section').hide();
    $('#prompt-media-type').prop('selectedIndex', 0).closest('.sidebar-section').hide();
    $('#prompt-input-type').prop('selectedIndex', 0).closest('.sidebar-section').hide();
    $('#prompt-select-options').val('').closest('.sidebar-section').hide();
    $('#prompt-save').hide();
}

/**
 * Set the sidebar to the default state of the provided type and show it.
 *
 * @param {String} type
 */
var setSidebarForType = function(type) {
    resetSidebar();
    switch (type) {
        case 'property':
            $('#prompt-property').closest('.sidebar-section').show();
            $('#prompt-input-type').closest('.sidebar-section').show();
            break;
        case 'media':
            $('#prompt-media-type').closest('.sidebar-section').show();
            break;
        case 'input':
            $('#prompt-input-type').closest('.sidebar-section').show();
            break;
        default:
            // invalid or no prompt type
            return;
    }
    $('#prompt-text').closest('.sidebar-section').show();
    $('#prompt-save').show();
}

// Handle changing the prompt's type.
$('#prompt-type').on('change', function() {
    var typeSelect = $(this);
    var type = typeSelect.val();
    setSidebarForType(type);
    typeSelect.val(type);
});

// Handle changing the prompt's input type.
$('#prompt-input-type').on('change', function() {
    var inputType = $(this).val();
    var selectOptionsSection = $('#prompt-select-options').closest('.sidebar-section');
    if ('select' === inputType) {
        selectOptionsSection.show();
    } else {
        selectOptionsSection.hide();
    }
});

// Handle the delete prompt icon.
$('#prompts').on('click', '.prompt-delete', function(e) {
    e.preventDefault();
    var deleteIcon = $(this);
    var prompt = deleteIcon.closest('.prompt');
    prompt.find(':input').prop('disabled', true);
    prompt.addClass('delete');
    prompt.find('.prompt-undo-delete').show();
    deleteIcon.hide();
});

// Handle the undo delete prompt icon.
$('#prompts').on('click', '.prompt-undo-delete', function(e) {
    e.preventDefault();
    var undoIcon = $(this);
    var prompt = undoIcon.closest('.prompt');
    prompt.find(':input').prop('disabled', false);
    prompt.removeClass('delete');
    prompt.find('.prompt-delete').show();
    undoIcon.hide();
});

// Handle the add prompt button.
$('#prompt-add').on('click', function(e) {
    e.preventDefault();
    resetSidebar();
    $('#prompts > .prompt').removeClass('prompt-editing');
    Omeka.openSidebar($('#prompt-sidebar'));
});

// Handle the edit prompt icon.
$('#prompts').on('click', '.prompt-edit', function(e) {
    e.preventDefault();

    var prompt = $(this).closest('.prompt');
    var type = prompt.find('.prompt-type').val();
    var text = prompt.find('.prompt-text').val();

    prompt.siblings().removeClass('prompt-editing');
    prompt.addClass('prompt-editing');

    setSidebarForType(type);
    switch (type) {
        case 'property':
            var inputType = prompt.find('.prompt-input-type').val();
            $('#prompt-type').val('property');
            $('#prompt-text').val(text);
            $('#prompt-property').val(prompt.find('.prompt-property-id').val());
            $('#prompt-input-type').val(inputType);
            if ('select' === inputType) {
                var selectOptions = prompt.find('.prompt-select-options').val();
                $('#prompt-select-options').val(selectOptions).closest('.sidebar-section').show();
            }
            break;
        case 'media':
            var mediaType = prompt.find('.prompt-media-type').val();
            $('#prompt-type').val('media');
            $('#prompt-text').val(text);
            $('#prompt-media-type').val(mediaType);
            break;
        case 'input':
            var inputType = prompt.find('.prompt-input-type').val();
            $('#prompt-type').val('input');
            $('#prompt-text').val(text);
            $('#prompt-input-type').val(inputType);
            if ('select' === inputType) {
                var selectOptions = prompt.find('.prompt-select-options').val();
                $('#prompt-select-options').val(selectOptions).closest('.sidebar-section').show();
            }
            break;
        default:
            // invalid or no prompt type
            return;
    }

    // A prompt type cannot be changed once it's saved.
    $('#prompt-type').prop('disabled', true).css('background-color', '#dfdfdf');
    Omeka.openSidebar($('#prompt-sidebar'));
});

// Handle saving the prompt.
$('#prompt-save').on('click', function(e) {
    e.preventDefault();
    var promptData = {
        'o-module-collecting:type': $('#prompt-type').val(),
        'o-module-collecting:text': $('#prompt-text').val(),
        'o-module-collecting:input_type': $('#prompt-input-type').val(),
        'o-module-collecting:select_options': $('#prompt-select-options').val(),
        'o-module-collecting:media_type': $('#prompt-media-type').val(),
        'o:property': {'o:id': $('#prompt-property').val()},
    };
    populatePromptRow(promptData);
    Omeka.closeSidebar($('#prompt-sidebar'));
});

// Append existing prompts on load.
$.each($('#prompts-span').data('promptsData'), function() {
    populatePromptRow(this);
});

// Enable prompt sorting.
new Sortable(document.getElementById('prompts'), {
    handle: '.sortable-handle'
});

});
</script>
